{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, f as readTask, w as writeTask, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\n\nconst CELL_TYPE_ITEM = 'item';\r\nconst CELL_TYPE_HEADER = 'header';\r\nconst CELL_TYPE_FOOTER = 'footer';\r\nconst NODE_CHANGE_NONE = 0;\r\nconst NODE_CHANGE_POSITION = 1;\r\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\r\nconst updateVDom = (dom, heightIndex, cells, range) => {\r\n    // reset dom\r\n    for (const node of dom) {\r\n        node.change = NODE_CHANGE_NONE;\r\n        node.d = true;\r\n    }\r\n    // try to match into exisiting dom\r\n    const toMutate = [];\r\n    const end = range.offset + range.length;\r\n    for (let i = range.offset; i < end; i++) {\r\n        const cell = cells[i];\r\n        const node = dom.find(n => n.d && n.cell === cell);\r\n        if (node) {\r\n            const top = heightIndex[i];\r\n            if (top !== node.top) {\r\n                node.top = top;\r\n                node.change = NODE_CHANGE_POSITION;\r\n            }\r\n            node.d = false;\r\n        }\r\n        else {\r\n            toMutate.push(cell);\r\n        }\r\n    }\r\n    // needs to append\r\n    const pool = dom.filter(n => n.d);\r\n    for (const cell of toMutate) {\r\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\r\n        const index = cell.i;\r\n        if (node) {\r\n            node.d = false;\r\n            node.change = NODE_CHANGE_CELL;\r\n            node.cell = cell;\r\n            node.top = heightIndex[index];\r\n        }\r\n        else {\r\n            dom.push({\r\n                d: false,\r\n                cell,\r\n                visible: true,\r\n                change: NODE_CHANGE_CELL,\r\n                top: heightIndex[index],\r\n            });\r\n        }\r\n    }\r\n    dom\r\n        .filter(n => n.d && n.top !== -9999)\r\n        .forEach(n => {\r\n        n.change = NODE_CHANGE_POSITION;\r\n        n.top = -9999;\r\n    });\r\n};\r\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\r\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\r\n    const childrenNu = children.length;\r\n    let child;\r\n    for (let i = 0; i < dom.length; i++) {\r\n        const node = dom[i];\r\n        const cell = node.cell;\r\n        // the cell change, the content must be updated\r\n        if (node.change === NODE_CHANGE_CELL) {\r\n            if (i < childrenNu) {\r\n                child = children[i];\r\n                nodeRender(child, cell, i);\r\n            }\r\n            else {\r\n                const newChild = createNode(el, cell.type);\r\n                child = nodeRender(newChild, cell, i) || newChild;\r\n                child.classList.add('virtual-item');\r\n                el.appendChild(child);\r\n            }\r\n            child['$ionCell'] = cell;\r\n        }\r\n        else {\r\n            child = children[i];\r\n        }\r\n        // only update position when it changes\r\n        if (node.change !== NODE_CHANGE_NONE) {\r\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\r\n        }\r\n        // update visibility\r\n        const visible = cell.visible;\r\n        if (node.visible !== visible) {\r\n            if (visible) {\r\n                child.classList.remove('virtual-loading');\r\n            }\r\n            else {\r\n                child.classList.add('virtual-loading');\r\n            }\r\n            node.visible = visible;\r\n        }\r\n        // dynamic height\r\n        if (cell.reads > 0) {\r\n            updateCellHeight(cell, child);\r\n            cell.reads--;\r\n        }\r\n    }\r\n};\r\nconst createNode = (el, type) => {\r\n    const template = getTemplate(el, type);\r\n    if (template && el.ownerDocument) {\r\n        return el.ownerDocument.importNode(template.content, true).children[0];\r\n    }\r\n    return null;\r\n};\r\nconst getTemplate = (el, type) => {\r\n    switch (type) {\r\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\r\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\r\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\r\n    }\r\n};\r\nconst getViewport = (scrollTop, vierportHeight, margin) => {\r\n    return {\r\n        top: Math.max(scrollTop - margin, 0),\r\n        bottom: scrollTop + vierportHeight + margin\r\n    };\r\n};\r\nconst getRange = (heightIndex, viewport, buffer) => {\r\n    const topPos = viewport.top;\r\n    const bottomPos = viewport.bottom;\r\n    // find top index\r\n    let i = 0;\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] > topPos) {\r\n            break;\r\n        }\r\n    }\r\n    const offset = Math.max(i - buffer - 1, 0);\r\n    // find bottom index\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] >= bottomPos) {\r\n            break;\r\n        }\r\n    }\r\n    const end = Math.min(i + buffer, heightIndex.length);\r\n    const length = end - offset;\r\n    return { offset, length };\r\n};\r\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\r\n    const end = range.offset + range.length;\r\n    return (dirtyIndex <= end ||\r\n        currentRange.offset !== range.offset ||\r\n        currentRange.length !== range.length);\r\n};\r\nconst findCellIndex = (cells, index) => {\r\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\r\n    if (index === 0) {\r\n        return 0;\r\n    }\r\n    else if (index === max + 1) {\r\n        return cells.length;\r\n    }\r\n    else {\r\n        return cells.findIndex(c => c.index === index);\r\n    }\r\n};\r\nconst inplaceUpdate = (dst, src, offset) => {\r\n    if (offset === 0 && src.length >= dst.length) {\r\n        return src;\r\n    }\r\n    for (let i = 0; i < src.length; i++) {\r\n        dst[i + offset] = src[i];\r\n    }\r\n    return dst;\r\n};\r\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\r\n    const cells = [];\r\n    const end = len + offset;\r\n    for (let i = offset; i < end; i++) {\r\n        const item = items[i];\r\n        if (headerFn) {\r\n            const value = headerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_HEADER,\r\n                    value,\r\n                    index: i,\r\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\r\n                    reads: headerHeight ? 0 : MIN_READS,\r\n                    visible: !!headerHeight,\r\n                });\r\n            }\r\n        }\r\n        cells.push({\r\n            i: j++,\r\n            type: CELL_TYPE_ITEM,\r\n            value: item,\r\n            index: i,\r\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\r\n            reads: itemHeight ? 0 : MIN_READS,\r\n            visible: !!itemHeight,\r\n        });\r\n        if (footerFn) {\r\n            const value = footerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_FOOTER,\r\n                    value,\r\n                    index: i,\r\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\r\n                    reads: footerHeight ? 0 : MIN_READS,\r\n                    visible: !!footerHeight,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return cells;\r\n};\r\nconst calcHeightIndex = (buf, cells, index) => {\r\n    let acum = buf[index];\r\n    for (let i = index; i < buf.length; i++) {\r\n        buf[i] = acum;\r\n        acum += cells[i].height;\r\n    }\r\n    return acum;\r\n};\r\nconst resizeBuffer = (buf, len) => {\r\n    if (!buf) {\r\n        return new Uint32Array(len);\r\n    }\r\n    if (buf.length === len) {\r\n        return buf;\r\n    }\r\n    else if (len > buf.length) {\r\n        const newBuf = new Uint32Array(len);\r\n        newBuf.set(buf);\r\n        return newBuf;\r\n    }\r\n    else {\r\n        return buf.subarray(0, len);\r\n    }\r\n};\r\nconst positionForIndex = (index, cells, heightIndex) => {\r\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\r\n    if (cell) {\r\n        return heightIndex[cell.i];\r\n    }\r\n    return -1;\r\n};\n\nconst VirtualScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = () => {\n            this.updateVirtualScroll();\n        };\n    }\n    itemsChanged() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.contentEl = contentEl;\n        this.calcCells();\n        this.updateState();\n    }\n    componentDidUpdate() {\n        this.updateState();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n    }\n    onResize() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    positionForItem(index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    async checkRange(offset, len = -1) {\n        // TODO: kind of hacky how we do in-place updated of the cells\n        // array. this part needs a complete refactor\n        if (!this.items) {\n            return;\n        }\n        const length = (len === -1)\n            ? this.items.length - offset\n            : len;\n        const cellIndex = findCellIndex(this.cells, offset);\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n        this.lastItemLen = this.items.length;\n        this.indexDirty = Math.max(offset - 1, 0);\n        this.scheduleUpdate();\n    }\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    async checkEnd() {\n        if (this.items) {\n            this.checkRange(this.lastItemLen);\n        }\n    }\n    updateVirtualScroll() {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    }\n    readVS() {\n        const { contentEl, scrollEl, el } = this;\n        let topOffset = 0;\n        let node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.parentElement;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    }\n    writeVS() {\n        const dirtyIndex = this.indexDirty;\n        // get visible viewport\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        const heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        const range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            this.el.forceUpdate();\n        }\n    }\n    updateCellHeight(cell, node) {\n        const update = () => {\n            if (node['$ionCell'] === cell) {\n                const style = window.getComputedStyle(node);\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    }\n    setCellHeight(cell, height) {\n        const index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    }\n    scheduleUpdate() {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n    }\n    updateState() {\n        const shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    }\n    calcCells() {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    }\n    getHeightIndex() {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    }\n    calcHeightIndex(index = 0) {\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        const scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = () => {\n                scrollEl.removeEventListener('scroll', this.onScroll);\n            };\n        }\n    }\n    renderVirtualNode(node) {\n        const { type, value, index } = node.cell;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    }\n    render() {\n        return (h(Host, { style: {\n                height: `${this.totalHeight}px`\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n    }; }\n    static get style() { return \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute!important;top:0!important;right:0!important;left:0!important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\"; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n    return utils.map(children, (child, i) => {\n        const node = dom[i];\n        const vattrs = child.vattrs || {};\n        let classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n    });\n};\n\nexport { VirtualScroll as ion_virtual_scroll };\n"],"sourceRoot":"webpack:///","file":"77-es5.js"}