{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, e as getElement, c as getIonMode, h, H as Host } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { e as debounce } from './helpers-46f4a262.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\r\n    const path = segments\r\n        .filter(s => s.length > 0)\r\n        .join('/');\r\n    return '/' + path;\r\n};\r\nconst chainToPath = (chain) => {\r\n    const path = [];\r\n    for (const route of chain) {\r\n        for (const segment of route.path) {\r\n            if (segment[0] === ':') {\r\n                const param = route.params && route.params[segment.slice(1)];\r\n                if (!param) {\r\n                    return null;\r\n                }\r\n                path.push(param);\r\n            }\r\n            else if (segment !== '') {\r\n                path.push(segment);\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n};\r\nconst writePath = (history, root, useHash, path, direction, state) => {\r\n    let url = generatePath([\r\n        ...parsePath(root),\r\n        ...path\r\n    ]);\r\n    if (useHash) {\r\n        url = '#' + url;\r\n    }\r\n    if (direction === ROUTER_INTENT_FORWARD) {\r\n        history.pushState(state, '', url);\r\n    }\r\n    else {\r\n        history.replaceState(state, '', url);\r\n    }\r\n};\r\nconst removePrefix = (prefix, path) => {\r\n    if (prefix.length > path.length) {\r\n        return null;\r\n    }\r\n    if (prefix.length <= 1 && prefix[0] === '') {\r\n        return path;\r\n    }\r\n    for (let i = 0; i < prefix.length; i++) {\r\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n            return null;\r\n        }\r\n    }\r\n    if (path.length === prefix.length) {\r\n        return [''];\r\n    }\r\n    return path.slice(prefix.length);\r\n};\r\nconst readPath = (loc, root, useHash) => {\r\n    let pathname = loc.pathname;\r\n    if (useHash) {\r\n        const hash = loc.hash;\r\n        pathname = (hash[0] === '#')\r\n            ? hash.slice(1)\r\n            : '';\r\n    }\r\n    const prefix = parsePath(root);\r\n    const path = parsePath(pathname);\r\n    return removePrefix(prefix, path);\r\n};\r\nconst parsePath = (path) => {\r\n    if (path == null) {\r\n        return [''];\r\n    }\r\n    const segments = path.split('/')\r\n        .map(s => s.trim())\r\n        .filter(s => s.length > 0);\r\n    if (segments.length === 0) {\r\n        return [''];\r\n    }\r\n    else {\r\n        return segments;\r\n    }\r\n};\n\nconst printRoutes = (routes) => {\r\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n    for (const chain of routes) {\r\n        const path = [];\r\n        chain.forEach(r => path.push(...r.path));\r\n        const ids = chain.map(r => r.id);\r\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n    }\r\n    console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n    for (const redirect of redirects) {\r\n        if (redirect.to) {\r\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n        }\r\n    }\r\n    console.groupEnd();\r\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false) => {\r\n    try {\r\n        // find next navigation outlet in the DOM\r\n        const outlet = searchNavNode(root);\r\n        // make sure we can continue interacting the DOM, otherwise abort\r\n        if (index >= chain.length || !outlet) {\r\n            return changed;\r\n        }\r\n        await outlet.componentOnReady();\r\n        const route = chain[index];\r\n        const result = await outlet.setRouteId(route.id, route.params, direction);\r\n        // if the outlet changed the page, reset navigation to neutral (no direction)\r\n        // this means nested outlets will not animate\r\n        if (result.changed) {\r\n            direction = ROUTER_INTENT_NONE;\r\n            changed = true;\r\n        }\r\n        // recursively set nested outlets\r\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\r\n        // once all nested outlets are visible let's make the parent visible too,\r\n        // using markVisible prevents flickering\r\n        if (result.markVisible) {\r\n            await result.markVisible();\r\n        }\r\n        return changed;\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        return false;\r\n    }\r\n};\r\nconst readNavState = async (root) => {\r\n    const ids = [];\r\n    let outlet;\r\n    let node = root;\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n        outlet = searchNavNode(node);\r\n        if (outlet) {\r\n            const id = await outlet.getRouteId();\r\n            if (id) {\r\n                node = id.element;\r\n                id.element = undefined;\r\n                ids.push(id);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n    if (searchNavNode(document.body)) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise(resolve => {\r\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n    });\r\n};\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n    if (!root) {\r\n        return undefined;\r\n    }\r\n    if (root.matches(QUERY)) {\r\n        return root;\r\n    }\r\n    const outlet = root.querySelector(QUERY);\r\n    return outlet ? outlet : undefined;\r\n};\n\nconst matchesRedirect = (input, route) => {\r\n    const { from, to } = route;\r\n    if (to === undefined) {\r\n        return false;\r\n    }\r\n    if (from.length > input.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        const expected = from[i];\r\n        if (expected === '*') {\r\n            return true;\r\n        }\r\n        if (expected !== input[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return from.length === input.length;\r\n};\r\nconst routeRedirect = (path, routes) => {\r\n    return routes.find(route => matchesRedirect(path, route));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n    const len = Math.min(ids.length, chain.length);\r\n    let i = 0;\r\n    for (; i < len; i++) {\r\n        if (ids[i].toLowerCase() !== chain[i].id) {\r\n            break;\r\n        }\r\n    }\r\n    return i;\r\n};\r\nconst matchesPath = (inputPath, chain) => {\r\n    const segments = new RouterSegments(inputPath);\r\n    let matchesDefault = false;\r\n    let allparams;\r\n    for (let i = 0; i < chain.length; i++) {\r\n        const path = chain[i].path;\r\n        if (path[0] === '') {\r\n            matchesDefault = true;\r\n        }\r\n        else {\r\n            for (const segment of path) {\r\n                const data = segments.next();\r\n                // data param\r\n                if (segment[0] === ':') {\r\n                    if (data === '') {\r\n                        return null;\r\n                    }\r\n                    allparams = allparams || [];\r\n                    const params = allparams[i] || (allparams[i] = {});\r\n                    params[segment.slice(1)] = data;\r\n                }\r\n                else if (data !== segment) {\r\n                    return null;\r\n                }\r\n            }\r\n            matchesDefault = false;\r\n        }\r\n    }\r\n    const matches = (matchesDefault)\r\n        ? matchesDefault === (segments.next() === '')\r\n        : true;\r\n    if (!matches) {\r\n        return null;\r\n    }\r\n    if (allparams) {\r\n        return chain.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, allparams[i])\r\n        }));\r\n    }\r\n    return chain;\r\n};\r\nconst mergeParams = (a, b) => {\r\n    if (!a && b) {\r\n        return b;\r\n    }\r\n    else if (a && !b) {\r\n        return a;\r\n    }\r\n    else if (a && b) {\r\n        return Object.assign(Object.assign({}, a), b);\r\n    }\r\n    return undefined;\r\n};\r\nconst routerIDsToChain = (ids, chains) => {\r\n    let match = null;\r\n    let maxMatches = 0;\r\n    const plainIDs = ids.map(i => i.id);\r\n    for (const chain of chains) {\r\n        const score = matchesIDs(plainIDs, chain);\r\n        if (score > maxMatches) {\r\n            match = chain;\r\n            maxMatches = score;\r\n        }\r\n    }\r\n    if (match) {\r\n        return match.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, ids[i] && ids[i].params)\r\n        }));\r\n    }\r\n    return null;\r\n};\r\nconst routerPathToChain = (path, chains) => {\r\n    let match = null;\r\n    let matches = 0;\r\n    for (const chain of chains) {\r\n        const matchedChain = matchesPath(path, chain);\r\n        if (matchedChain !== null) {\r\n            const score = computePriority(matchedChain);\r\n            if (score > matches) {\r\n                matches = score;\r\n                match = matchedChain;\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n};\r\nconst computePriority = (chain) => {\r\n    let score = 1;\r\n    let level = 1;\r\n    for (const route of chain) {\r\n        for (const path of route.path) {\r\n            if (path[0] === ':') {\r\n                score += Math.pow(1, level);\r\n            }\r\n            else if (path !== '') {\r\n                score += Math.pow(2, level);\r\n            }\r\n            level++;\r\n        }\r\n    }\r\n    return score;\r\n};\r\nclass RouterSegments {\r\n    constructor(path) {\r\n        this.path = path.slice();\r\n    }\r\n    next() {\r\n        if (this.path.length > 0) {\r\n            return this.path.shift();\r\n        }\r\n        return '';\r\n    }\r\n}\n\nconst readRedirects = (root) => {\r\n    return Array.from(root.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n        .map(el => {\r\n        const to = readProp(el, 'to');\r\n        return {\r\n            from: parsePath(readProp(el, 'from')),\r\n            to: to == null ? undefined : parsePath(to),\r\n        };\r\n    });\r\n};\r\nconst readRoutes = (root) => {\r\n    return flattenRouterTree(readRouteNodes(root));\r\n};\r\nconst readRouteNodes = (root, node = root) => {\r\n    return Array.from(node.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n        .map(el => {\r\n        const component = readProp(el, 'component');\r\n        if (component == null) {\r\n            throw new Error('component missing in ion-route');\r\n        }\r\n        return {\r\n            path: parsePath(readProp(el, 'url')),\r\n            id: component.toLowerCase(),\r\n            params: el.componentProps,\r\n            children: readRouteNodes(root, el)\r\n        };\r\n    });\r\n};\r\nconst readProp = (el, prop) => {\r\n    if (prop in el) {\r\n        return el[prop];\r\n    }\r\n    if (el.hasAttribute(prop)) {\r\n        return el.getAttribute(prop);\r\n    }\r\n    return null;\r\n};\r\nconst flattenRouterTree = (nodes) => {\r\n    const routes = [];\r\n    for (const node of nodes) {\r\n        flattenNode([], routes, node);\r\n    }\r\n    return routes;\r\n};\r\nconst flattenNode = (chain, routes, node) => {\r\n    const s = chain.slice();\r\n    s.push({\r\n        id: node.id,\r\n        path: node.path,\r\n        params: node.params\r\n    });\r\n    if (node.children.length === 0) {\r\n        routes.push(s);\r\n        return;\r\n    }\r\n    for (const sub of node.children) {\r\n        flattenNode(s, routes, sub);\r\n    }\r\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    onPopState() {\n        const direction = this.historyDirection();\n        const path = this.getPath();\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, () => this.back());\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    push(url, direction = 'forward') {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        const path = parsePath(url);\n        this.setPath(path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\n};\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"sourceRoot":"webpack:///","file":"55-es5.js"}